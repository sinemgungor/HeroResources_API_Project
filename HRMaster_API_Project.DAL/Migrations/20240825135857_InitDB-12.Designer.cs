// <auto-generated />
using System;
using HRMaster_API_Project.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMaster_API_Project.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240825135857_InitDB-12")]
    partial class InitDB12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AdvanceRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CEOId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyField")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyInformation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ContractStartingDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EstablishedDate")
                        .HasColumnType("date");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MersisNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificaitonNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxOfficeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CEOId")
                        .IsUnique()
                        .HasFilter("[CEOId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CEOId = 5,
                            CompanyAddress = "123 Innovation Drive",
                            CompanyEmail = "contact@techinnovations.com",
                            CompanyField = "Technology",
                            CompanyInformation = "Leading tech company specializing in innovative solutions.",
                            CompanyName = "Tech Innovations",
                            CompanyPhoneNumber = "555-1234",
                            CompanyTitle = "Tech Innovations Bilişim ve Teknoloji Şirketi",
                            CompanyType = "SoleProprietorship",
                            CompanyWebsite = "www.techinnovations.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 16, 58, 56, 233, DateTimeKind.Local).AddTicks(8421),
                            EstablishedDate = new DateOnly(2001, 4, 23),
                            LogoPath = "/images/logos/tech_innovations.png",
                            MersisNumber = "1234567890",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI123456",
                            TaxOfficeName = "Downtown Tax Office"
                        },
                        new
                        {
                            ID = 2,
                            CEOId = 6,
                            CompanyAddress = "456 Green Road",
                            CompanyEmail = "info@greenenergy.com",
                            CompanyField = "Energy",
                            CompanyInformation = "Providing renewable energy solutions worldwide.",
                            CompanyName = "Green Energy Solutions",
                            CompanyPhoneNumber = "555-5678",
                            CompanyTitle = "Green Energy Solutions AŞ.",
                            CompanyType = "JointStockCompany",
                            CompanyWebsite = "www.greenenergy.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 16, 58, 56, 233, DateTimeKind.Local).AddTicks(8491),
                            EstablishedDate = new DateOnly(2010, 7, 15),
                            LogoPath = "/images/logos/greenenergy.jpeg",
                            MersisNumber = "0987654321",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI654321",
                            TaxOfficeName = "Uptown Tax Office"
                        },
                        new
                        {
                            ID = 3,
                            CEOId = 7,
                            CompanyAddress = "789 Wellness Ave",
                            CompanyEmail = "support@healthwellness.com",
                            CompanyField = "Healthcare",
                            CompanyInformation = "Committed to providing top health and wellness services.",
                            CompanyName = "Health & Wellness",
                            CompanyPhoneNumber = "555-7890",
                            CompanyTitle = "Health & Wellness Sağlık ve Güzellik Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.healthwellness.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 16, 58, 56, 233, DateTimeKind.Local).AddTicks(8498),
                            EstablishedDate = new DateOnly(2015, 3, 30),
                            LogoPath = "/images/logos/healthandwellness.jpeg",
                            MersisNumber = "1122334455",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI112233",
                            TaxOfficeName = "City Tax Office"
                        },
                        new
                        {
                            ID = 4,
                            CEOId = 8,
                            CompanyAddress = "101 Education Blvd",
                            CompanyEmail = "admissions@edufuture.com",
                            CompanyField = "Education",
                            CompanyInformation = "Innovative education for the future.",
                            CompanyName = "EduFuture Academy",
                            CompanyPhoneNumber = "555-1011",
                            CompanyTitle = "EduFuture Eğitim Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.edufuture.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 16, 58, 56, 233, DateTimeKind.Local).AddTicks(8506),
                            EstablishedDate = new DateOnly(2020, 1, 10),
                            LogoPath = "/images/logos/edufuture.jpeg",
                            MersisNumber = "5566778899",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI556677",
                            TaxOfficeName = "Suburb Tax Office"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Finans",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ar-Ge",
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Finans",
                            Status = 0
                        },
                        new
                        {
                            ID = 16,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 17,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 18,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 19,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 20,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 21,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 22,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ar-Ge",
                            Status = 0
                        },
                        new
                        {
                            ID = 23,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 24,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("ExpenseRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("LeaveDays")
                        .HasColumnType("float");

                    b.Property<DateOnly>("LeaveEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LeaveStartingDate")
                        .HasColumnType("date");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "ed3a230e-c7cd-4c98-932a-31bdb6b80e06",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5e21aaba-8887-4335-9023-22fa6abe2c98",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "60204a97-1886-45c0-8da3-519e886d1e0f",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CEORelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeRelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Job")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MarialStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeRelatedCompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Üsküdar",
                            BirthDate = new DateOnly(1986, 3, 15),
                            BirthState = "Bolu",
                            BloodGroup = "BPositive",
                            ConcurrencyStamp = "a5641321-55f9-477e-8030-e0c3402226fb",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 240, DateTimeKind.Utc).AddTicks(2896),
                            Email = "onurakpinarr95@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2019, 11, 1),
                            IdentityNumber = "56789012345",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Onur",
                            NormalizedEmail = "ONURAKPINARR95@GMAIL.COM",
                            NormalizedUserName = "ONURAKPINARR95@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuYCnt8qDs81Dq4P8v7ENJfH6UMceCT67sQ/YF1ltnB4bHdbc4z794P/kvWlzQyMA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8700.5m,
                            SecurityStamp = "812e4ff1-16fc-4091-82fa-90be17029059",
                            Status = 1,
                            Surname = "Akpınar",
                            Title = "Project Manager",
                            TwoFactorEnabled = false,
                            UserName = "onurakpinarr95@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Küçükyalı",
                            BirthDate = new DateOnly(1985, 6, 20),
                            BirthState = "Gaziantep",
                            BloodGroup = "APositive",
                            ConcurrencyStamp = "650042c4-7d55-4164-b4f4-5b581a4d0715",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 312, DateTimeKind.Utc).AddTicks(267),
                            Email = "sinemgngr@outlook.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2020, 7, 15),
                            IdentityNumber = "57890123456",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Sinem",
                            NormalizedEmail = "SINEMGNGR@OUTLOOK.COM",
                            NormalizedUserName = "SINEMGNGR@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED2yaTqoJG5TYAZez48qn3QSqOvb/ZP5KZmCYtrv4ylxZacHCBG7yNJUJ7paWRMdwQ==",
                            PhoneNumber = "+90544444444",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7900m,
                            SecurityStamp = "bf2f4a9a-2e38-4cec-9cc0-adcfc98ea879",
                            Status = 1,
                            Surname = "Güngör",
                            Title = "Business Analyst",
                            TwoFactorEnabled = false,
                            UserName = "sinemgngr@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Edirne",
                            BirthDate = new DateOnly(1992, 10, 5),
                            BirthState = "Mardin",
                            BloodGroup = "OPositive",
                            ConcurrencyStamp = "395c82d0-9a0f-48bb-b1c4-4d47ec8577e2",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 399, DateTimeKind.Utc).AddTicks(685),
                            Email = "recepoztuna@hotmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 3, 1),
                            IdentityNumber = "58901234567",
                            Job = "ADMINt",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Recep",
                            NormalizedEmail = "RECEPOZTUNA@HOTMAIL.COM",
                            NormalizedUserName = "RECEPOZTUNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIX0UguC1VuKoOx4uucPMHOs22kVG0VeMCyjhM+V/tRUI16z6IcN0wsh2k3K0H3iiQ==",
                            PhoneNumber = "+905333333333",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7300.25m,
                            SecurityStamp = "e010e4e0-2a95-4e3a-b478-e36412eb46a6",
                            Status = 1,
                            Surname = "Öztuna",
                            Title = "Digital Marketing Specialist",
                            TwoFactorEnabled = false,
                            UserName = "recepoztuna@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Zeytinburnu",
                            BirthDate = new DateOnly(1992, 10, 5),
                            BirthState = "Mardin",
                            BloodGroup = "ABPositive",
                            ConcurrencyStamp = "026ba4ec-25d4-40b1-9d4f-76c3bd64b0b2",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 494, DateTimeKind.Utc).AddTicks(6188),
                            Email = "ozercemre1@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 3, 1),
                            IdentityNumber = "58901234567",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Cemre",
                            NormalizedEmail = "OZERCEMRE1@GMAIL.COM",
                            NormalizedUserName = "OZERCEMRE1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQmRJgWX7k8Ho5U5vfUfsARMkZ5dCqNu1wCv+A28Va4poRKI1K7fkTslJGAUpa7SQ==",
                            PhoneNumber = "+905311111111",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7300.25m,
                            SecurityStamp = "bd9ba8c6-4f6e-4a5f-973c-ba86d7d8e1e3",
                            Status = 1,
                            Surname = "Admin",
                            Title = "Digital Marketing Specialist",
                            TwoFactorEnabled = false,
                            UserName = "ozercemre1@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Kadıköy",
                            BirthDate = new DateOnly(1992, 11, 10),
                            BirthState = "Bursa",
                            BloodGroup = "APositive",
                            CEORelatedCompanyID = 1,
                            ConcurrencyStamp = "7b5557dd-f2a3-47a3-8f78-d1ed4d6f0907",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 589, DateTimeKind.Utc).AddTicks(5668),
                            Email = "ali.yilmaz@example.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2020, 10, 1),
                            IdentityNumber = "43212345312",
                            Job = "CEO",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Ali",
                            NormalizedEmail = "ALI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ALI.YILMAZ@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELKY1c2aqGja3fBrc9gfYeJySSgvD8p/yJ/gvayOrUFwFRl+J+53C7Ag5QzEDbcj3Q==",
                            PhoneNumber = "+905311234567",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8700.25m,
                            SecurityStamp = "6a978af3-5657-4511-968e-d434fc14a99d",
                            Status = 1,
                            Surname = "Yılmaz",
                            Title = "HR Manager",
                            TwoFactorEnabled = false,
                            UserName = "ali.yilmaz@example.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Beşiktaş",
                            BirthDate = new DateOnly(1985, 5, 20),
                            BirthState = "İstanbul",
                            BloodGroup = "BNegative",
                            CEORelatedCompanyID = 2,
                            ConcurrencyStamp = "a2c4adbd-cbb8-41d5-8f7c-43ce3bb18f97",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 711, DateTimeKind.Utc).AddTicks(1533),
                            Email = "ayse.demir@example.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2018, 6, 15),
                            IdentityNumber = "53245678901",
                            Job = "CEO",
                            LockoutEnabled = false,
                            MarialStatus = "Married",
                            Name = "Ayşe",
                            NormalizedEmail = "AYSE.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYSE.DEMIR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcHZ8UQ4nO8T+AH3pISGYMf2uVakKfFgVKeURaH/TWdl+cm5pl8MunylZ4iFv7D+Q==",
                            PhoneNumber = "+905322345678",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 9200.75m,
                            SecurityStamp = "015dd7d4-d209-4d7b-b181-448d1208aba5",
                            Status = 1,
                            Surname = "Demir",
                            Title = "Chief Technology Officer",
                            TwoFactorEnabled = false,
                            UserName = "ayse.demir@example.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "Üsküdar",
                            BirthDate = new DateOnly(1978, 8, 30),
                            BirthState = "Ankara",
                            BloodGroup = "ANegative",
                            CEORelatedCompanyID = 3,
                            ConcurrencyStamp = "7b7d2f22-c788-4353-9b1a-9fd30f6c6dec",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 816, DateTimeKind.Utc).AddTicks(1242),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2016, 2, 10),
                            IdentityNumber = "32145698700",
                            Job = "CFO",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Mehmet",
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET.KAYA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE89g++ZpBbA4bZKjfgVK/m6iXLAu1n6VTBFXSFy8iXzRgdqpSOtFlKn3o/leiV9xw==",
                            PhoneNumber = "+905336789012",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 9500.5m,
                            SecurityStamp = "61ca6cf5-b3ef-4247-8330-3a7ec3c2cd83",
                            Status = 1,
                            Surname = "Kaya",
                            Title = "Chief Financial Officer",
                            TwoFactorEnabled = false,
                            UserName = "mehmet.kaya@example.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "Taksim",
                            BirthDate = new DateOnly(1990, 12, 5),
                            BirthState = "İzmir",
                            BloodGroup = "ONegative",
                            CEORelatedCompanyID = 4,
                            ConcurrencyStamp = "b23014cb-2f9b-427b-b9e1-1d8c2fe8791f",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 56, 925, DateTimeKind.Utc).AddTicks(3837),
                            Email = "fatma.yurt@example.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2019, 11, 22),
                            IdentityNumber = "45678901234",
                            Job = "COO",
                            LockoutEnabled = false,
                            MarialStatus = "Married",
                            Name = "Fatma",
                            NormalizedEmail = "FATMA.YURT@EXAMPLE.COM",
                            NormalizedUserName = "FATMA.YURT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENfJBPPt17kh30SQwVJ0ZSMxwnpIwNFF3i45G6LAEIFwMBiYeGyEr9sjxBVS0Lrv3Q==",
                            PhoneNumber = "+905349876543",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8800m,
                            SecurityStamp = "549a0602-a730-49fe-bf4b-a29f7f753907",
                            Status = 1,
                            Surname = "Yurt",
                            Title = "Chief Operating Officer",
                            TwoFactorEnabled = false,
                            UserName = "fatma.yurt@example.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "Kadıköy",
                            BirthDate = new DateOnly(1990, 9, 15),
                            BirthState = "Ankara",
                            BloodGroup = "ABPositive",
                            ConcurrencyStamp = "cd4eefd3-aa49-425f-b766-0a2e41963693",
                            CreationDate = new DateTime(2024, 8, 25, 13, 58, 57, 47, DateTimeKind.Utc).AddTicks(7387),
                            Email = "mert.kaya@example.com",
                            EmailConfirmed = true,
                            EmployeeRelatedCompanyID = 3,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 4, 10),
                            IdentityNumber = "78901234567",
                            Job = "Software Developer",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Mert",
                            NormalizedEmail = "MERT.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MERT.KAYA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENm/AbK3v5NgAfmu9SKymK1/SnliZY7iLuxOrCAE42+RNugmUwJ//8+TAYJCWIuJqQ==",
                            PhoneNumber = "+905341234567",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7500.5m,
                            SecurityStamp = "14a8f619-f8ab-4111-bee0-f8c1a53b50a0",
                            Status = 1,
                            Surname = "Kaya",
                            Title = "Junior Developer",
                            TwoFactorEnabled = false,
                            UserName = "mert.kaya@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("AdvanceRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "CEO")
                        .WithOne("CEORelatedCompany")
                        .HasForeignKey("HRMaster_API_Project.Entities.Concrete.Company", "CEOId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CEO");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "EmployeeRelatedCompany")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRelatedCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("EmployeeRelatedCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Navigation("AdvanceRequests");

                    b.Navigation("CEORelatedCompany");

                    b.Navigation("ExpenseRequests");

                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
