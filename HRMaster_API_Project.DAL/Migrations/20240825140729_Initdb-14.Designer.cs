// <auto-generated />
using System;
using HRMaster_API_Project.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMaster_API_Project.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240825140729_Initdb-14")]
    partial class Initdb14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AdvanceRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CEOId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyField")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyInformation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ContractStartingDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EstablishedDate")
                        .HasColumnType("date");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MersisNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificaitonNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxOfficeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CEOId")
                        .IsUnique()
                        .HasFilter("[CEOId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CEOId = 5,
                            CompanyAddress = "123 Innovation Drive",
                            CompanyEmail = "contact@techinnovations.com",
                            CompanyField = "Technology",
                            CompanyInformation = "Leading tech company specializing in innovative solutions.",
                            CompanyName = "Tech Innovations",
                            CompanyPhoneNumber = "555-1234",
                            CompanyTitle = "Tech Innovations Bilişim ve Teknoloji Şirketi",
                            CompanyType = "SoleProprietorship",
                            CompanyWebsite = "www.techinnovations.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 17, 7, 27, 630, DateTimeKind.Local).AddTicks(1415),
                            EstablishedDate = new DateOnly(2001, 4, 23),
                            LogoPath = "/images/logos/tech_innovations.png",
                            MersisNumber = "1234567890",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI123456",
                            TaxOfficeName = "Downtown Tax Office"
                        },
                        new
                        {
                            ID = 2,
                            CEOId = 6,
                            CompanyAddress = "456 Green Road",
                            CompanyEmail = "info@greenenergy.com",
                            CompanyField = "Energy",
                            CompanyInformation = "Providing renewable energy solutions worldwide.",
                            CompanyName = "Green Energy Solutions",
                            CompanyPhoneNumber = "555-5678",
                            CompanyTitle = "Green Energy Solutions AŞ.",
                            CompanyType = "JointStockCompany",
                            CompanyWebsite = "www.greenenergy.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 17, 7, 27, 630, DateTimeKind.Local).AddTicks(1517),
                            EstablishedDate = new DateOnly(2010, 7, 15),
                            LogoPath = "/images/logos/greenenergy.jpeg",
                            MersisNumber = "0987654321",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI654321",
                            TaxOfficeName = "Uptown Tax Office"
                        },
                        new
                        {
                            ID = 3,
                            CEOId = 7,
                            CompanyAddress = "789 Wellness Ave",
                            CompanyEmail = "support@healthwellness.com",
                            CompanyField = "Healthcare",
                            CompanyInformation = "Committed to providing top health and wellness services.",
                            CompanyName = "Health & Wellness",
                            CompanyPhoneNumber = "555-7890",
                            CompanyTitle = "Health & Wellness Sağlık ve Güzellik Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.healthwellness.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 17, 7, 27, 630, DateTimeKind.Local).AddTicks(1528),
                            EstablishedDate = new DateOnly(2015, 3, 30),
                            LogoPath = "/images/logos/healthandwellness.jpeg",
                            MersisNumber = "1122334455",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI112233",
                            TaxOfficeName = "City Tax Office"
                        },
                        new
                        {
                            ID = 4,
                            CEOId = 8,
                            CompanyAddress = "101 Education Blvd",
                            CompanyEmail = "admissions@edufuture.com",
                            CompanyField = "Education",
                            CompanyInformation = "Innovative education for the future.",
                            CompanyName = "EduFuture Academy",
                            CompanyPhoneNumber = "555-1011",
                            CompanyTitle = "EduFuture Eğitim Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.edufuture.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 25, 17, 7, 27, 630, DateTimeKind.Local).AddTicks(1576),
                            EstablishedDate = new DateOnly(2020, 1, 10),
                            LogoPath = "/images/logos/edufuture.jpeg",
                            MersisNumber = "5566778899",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI556677",
                            TaxOfficeName = "Suburb Tax Office"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Finans",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            CompanyID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 8,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 9,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 10,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ar-Ge",
                            Status = 0
                        },
                        new
                        {
                            ID = 11,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 12,
                            CompanyID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        },
                        new
                        {
                            ID = 13,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        },
                        new
                        {
                            ID = 14,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 0
                        },
                        new
                        {
                            ID = 15,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Finans",
                            Status = 0
                        },
                        new
                        {
                            ID = 16,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 17,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 18,
                            CompanyID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 19,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Teknoloji",
                            Status = 0
                        },
                        new
                        {
                            ID = 20,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satış",
                            Status = 0
                        },
                        new
                        {
                            ID = 21,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Pazarlama",
                            Status = 0
                        },
                        new
                        {
                            ID = 22,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ar-Ge",
                            Status = 0
                        },
                        new
                        {
                            ID = 23,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Mühendislik",
                            Status = 0
                        },
                        new
                        {
                            ID = 24,
                            CompanyID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Lojistik",
                            Status = 0
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("ExpenseRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("LeaveDays")
                        .HasColumnType("float");

                    b.Property<DateOnly>("LeaveEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LeaveStartingDate")
                        .HasColumnType("date");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "bd578d76-e17b-4284-855f-6214dba5ea5f",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "74d6e148-561f-42bb-a7a0-0e59771bd1c9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "e3e30850-3697-4f67-b7b1-1fb8131d4339",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CEORelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeRelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Job")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MarialStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeRelatedCompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Üsküdar",
                            BirthDate = new DateOnly(1986, 3, 15),
                            BirthState = "Bolu",
                            BloodGroup = "BPositive",
                            ConcurrencyStamp = "23166da6-fc92-4d71-9943-ce79fad5818f",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 640, DateTimeKind.Utc).AddTicks(4769),
                            Email = "onurakpinarr95@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2019, 11, 1),
                            IdentityNumber = "56789012345",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Onur",
                            NormalizedEmail = "ONURAKPINARR95@GMAIL.COM",
                            NormalizedUserName = "ONURAKPINARR95@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKGoXodpm2aaxsGhliJA2tRYBYqjtYhrG/t8YsQuastm5vJ1xtnhylbbwv6DE+aZzA==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8700.5m,
                            SecurityStamp = "09a3cabe-5ed3-4c5a-9165-958594e3e336",
                            Status = 1,
                            Surname = "Akpınar",
                            Title = "Project Manager",
                            TwoFactorEnabled = false,
                            UserName = "onurakpinarr95@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Küçükyalı",
                            BirthDate = new DateOnly(1985, 6, 20),
                            BirthState = "Gaziantep",
                            BloodGroup = "APositive",
                            ConcurrencyStamp = "ab04aaa6-8587-4263-afb5-7d7ff26c96e4",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 713, DateTimeKind.Utc).AddTicks(5523),
                            Email = "sinemgngr@outlook.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2020, 7, 15),
                            IdentityNumber = "57890123456",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Sinem",
                            NormalizedEmail = "SINEMGNGR@OUTLOOK.COM",
                            NormalizedUserName = "SINEMGNGR@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJptE4BSv/VcLGARrAGWTAg20VAwqIeQ7gaxOaV91aQc9QmOis2xa9xPm5PQ2Z6jpg==",
                            PhoneNumber = "+90544444444",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7900m,
                            SecurityStamp = "69423995-1ede-4de2-ace8-70ae1e69d4d1",
                            Status = 1,
                            Surname = "Güngör",
                            Title = "Business Analyst",
                            TwoFactorEnabled = false,
                            UserName = "sinemgngr@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Edirne",
                            BirthDate = new DateOnly(1992, 10, 5),
                            BirthState = "Mardin",
                            BloodGroup = "OPositive",
                            ConcurrencyStamp = "0698614e-a186-418e-872f-794841b4c143",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 783, DateTimeKind.Utc).AddTicks(8348),
                            Email = "recepoztuna@hotmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 3, 1),
                            IdentityNumber = "58901234567",
                            Job = "ADMINt",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Recep",
                            NormalizedEmail = "RECEPOZTUNA@HOTMAIL.COM",
                            NormalizedUserName = "RECEPOZTUNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOsccwp5LcOwMlExEw/jvl/G3LQjLYgNeYE1YhNEKUTSsGYxPbEjXu12wMhNkKZovA==",
                            PhoneNumber = "+905333333333",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7300.25m,
                            SecurityStamp = "58210d97-9f69-416c-be22-885d644d2182",
                            Status = 1,
                            Surname = "Öztuna",
                            Title = "Digital Marketing Specialist",
                            TwoFactorEnabled = false,
                            UserName = "recepoztuna@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Zeytinburnu",
                            BirthDate = new DateOnly(1992, 10, 5),
                            BirthState = "Mardin",
                            BloodGroup = "ABPositive",
                            ConcurrencyStamp = "74ba5018-fe2a-4940-8c1d-6b33fb74787b",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 858, DateTimeKind.Utc).AddTicks(2221),
                            Email = "ozercemre1@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 3, 1),
                            IdentityNumber = "58901234567",
                            Job = "ADMIN",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Cemre",
                            NormalizedEmail = "OZERCEMRE1@GMAIL.COM",
                            NormalizedUserName = "OZERCEMRE1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENjXJjj3CZJQKS5iZ/REY6MJDu53tsXhPodCh4G6k/QFMMZ3gdP/cUlFTPWebHbCYA==",
                            PhoneNumber = "+905311111111",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7300.25m,
                            SecurityStamp = "731dcbfd-7a78-4ac3-b0d2-cc5ccaf35ff2",
                            Status = 1,
                            Surname = "Admin",
                            Title = "Digital Marketing Specialist",
                            TwoFactorEnabled = false,
                            UserName = "ozercemre1@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Kadıköy",
                            BirthDate = new DateOnly(1992, 11, 10),
                            BirthState = "Bursa",
                            BloodGroup = "APositive",
                            CEORelatedCompanyID = 1,
                            ConcurrencyStamp = "0e12eb56-2687-4d78-9a5e-4a03d1af030b",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 929, DateTimeKind.Utc).AddTicks(5944),
                            Email = "ali.yilmaz@example.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2020, 10, 1),
                            IdentityNumber = "43212345312",
                            Job = "CEO",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Ali",
                            NormalizedEmail = "ALI.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "ALI.YILMAZ@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELu1btjjAW3oYbQXJ5ITZBkjFnuFy4CELGni/qYwa5Ia5a3jAOIqAOs0uH2wPFH7Xg==",
                            PhoneNumber = "+905311234567",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8700.25m,
                            SecurityStamp = "f24fc884-c3b2-4f63-8e78-a19a014c0f5d",
                            Status = 1,
                            Surname = "Yılmaz",
                            Title = "HR Manager",
                            TwoFactorEnabled = false,
                            UserName = "ali.yilmaz@example.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "Beşiktaş",
                            BirthDate = new DateOnly(1985, 5, 20),
                            BirthState = "İstanbul",
                            BloodGroup = "BNegative",
                            CEORelatedCompanyID = 2,
                            ConcurrencyStamp = "554b4e19-a7f2-4764-bd2c-25930be1a420",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 27, 995, DateTimeKind.Utc).AddTicks(2241),
                            Email = "ayse.demir@example.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2018, 6, 15),
                            IdentityNumber = "53245678901",
                            Job = "CEO",
                            LockoutEnabled = false,
                            MarialStatus = "Married",
                            Name = "Ayşe",
                            NormalizedEmail = "AYSE.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "AYSE.DEMIR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENtNhKMefnCG/vpAxtSpmJna5y0lxw70nUBfD3eAAqKw9o/Y3KJNY06yeWyb+hGKxw==",
                            PhoneNumber = "+905322345678",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 9200.75m,
                            SecurityStamp = "bacb0a8b-a96f-40df-87e4-3eed6bebd69e",
                            Status = 1,
                            Surname = "Demir",
                            Title = "Chief Technology Officer",
                            TwoFactorEnabled = false,
                            UserName = "ayse.demir@example.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "Üsküdar",
                            BirthDate = new DateOnly(1978, 8, 30),
                            BirthState = "Ankara",
                            BloodGroup = "ANegative",
                            CEORelatedCompanyID = 3,
                            ConcurrencyStamp = "fe16aef2-24b9-4e7e-8dae-3fe80d184a52",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 66, DateTimeKind.Utc).AddTicks(4068),
                            Email = "mehmet.kaya@example.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            HireDate = new DateOnly(2016, 2, 10),
                            IdentityNumber = "32145698700",
                            Job = "CFO",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Mehmet",
                            NormalizedEmail = "MEHMET.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MEHMET.KAYA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUfZ/cLl4Y22bMRz7IlaVJ+vYT+Wd1oAEdAt4xdvsJtqog2Z5203QmcSZPog3AGGw==",
                            PhoneNumber = "+905336789012",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 9500.5m,
                            SecurityStamp = "f84251c5-2cfd-49b3-a9dc-fb2cf33d9cc3",
                            Status = 1,
                            Surname = "Kaya",
                            Title = "Chief Financial Officer",
                            TwoFactorEnabled = false,
                            UserName = "mehmet.kaya@example.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "Taksim",
                            BirthDate = new DateOnly(1990, 12, 5),
                            BirthState = "İzmir",
                            BloodGroup = "ONegative",
                            CEORelatedCompanyID = 4,
                            ConcurrencyStamp = "cf74c442-a428-4c7c-bbe0-3b6fa9d64033",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 139, DateTimeKind.Utc).AddTicks(7875),
                            Email = "fatma.yurt@example.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            HireDate = new DateOnly(2019, 11, 22),
                            IdentityNumber = "45678901234",
                            Job = "COO",
                            LockoutEnabled = false,
                            MarialStatus = "Married",
                            Name = "Fatma",
                            NormalizedEmail = "FATMA.YURT@EXAMPLE.COM",
                            NormalizedUserName = "FATMA.YURT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIf3QOF06DXQDGeWO0vTa3WgiCUv4bif19TQWqqfVLWezKK3RV4MqCT59kzX97CCFg==",
                            PhoneNumber = "+905349876543",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8800m,
                            SecurityStamp = "81f62a20-3ffd-439e-9d30-544494e33432",
                            Status = 1,
                            Surname = "Yurt",
                            Title = "Chief Operating Officer",
                            TwoFactorEnabled = false,
                            UserName = "fatma.yurt@example.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "Kadıköy",
                            BirthDate = new DateOnly(1990, 9, 15),
                            BirthState = "Ankara",
                            BloodGroup = "ABPositive",
                            ConcurrencyStamp = "fb7c5d7a-d3c1-4fc3-88c8-8e410a80d84e",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 209, DateTimeKind.Utc).AddTicks(3304),
                            Email = "mert.kaya@example.com",
                            EmailConfirmed = true,
                            EmployeeRelatedCompanyID = 3,
                            Gender = "Male",
                            HireDate = new DateOnly(2021, 4, 10),
                            IdentityNumber = "78901234567",
                            Job = "Software Developer",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Mert",
                            NormalizedEmail = "MERT.KAYA@EXAMPLE.COM",
                            NormalizedUserName = "MERT.KAYA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMg+KWHQLmsIJHjG8eLYZT+5hHmuzbUoCXTvJcZlebkL41/KtfGpQ7jKQIbeLuQO7A==",
                            PhoneNumber = "+905341234567",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7500.5m,
                            SecurityStamp = "110bd563-c866-4176-8384-36f67787d9b0",
                            Status = 1,
                            Surname = "Kaya",
                            Title = "Junior Developer",
                            TwoFactorEnabled = false,
                            UserName = "mert.kaya@example.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "Etiler",
                            BirthDate = new DateOnly(1993, 2, 18),
                            BirthState = "İzmir",
                            BloodGroup = "OPositive",
                            ConcurrencyStamp = "bd83bdf1-5a19-46d0-92d4-0f08553eb8de",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 285, DateTimeKind.Utc).AddTicks(9573),
                            Email = "elif.koc@example.com",
                            EmailConfirmed = true,
                            EmployeeRelatedCompanyID = 3,
                            Gender = "Female",
                            HireDate = new DateOnly(2019, 1, 20),
                            IdentityNumber = "12365478901",
                            Job = "Project Manager",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Elif",
                            NormalizedEmail = "ELIF.KOC@EXAMPLE.COM",
                            NormalizedUserName = "ELIF.KOC@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUBDgOJg+D5eLfGjQtfMFrfJTnZInIw4AGe0+9YY/mJn9H8gFrLSQmmkypGMb63QA==",
                            PhoneNumber = "+905355678901",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 8000.75m,
                            SecurityStamp = "8a914a9f-e9df-478f-a298-e6a531dfb64f",
                            Status = 1,
                            Surname = "Koç",
                            Title = "Manager",
                            TwoFactorEnabled = false,
                            UserName = "elif.koc@example.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "Bakırköy",
                            BirthDate = new DateOnly(1988, 12, 30),
                            BirthState = "Antalya",
                            BloodGroup = "ANegative",
                            ConcurrencyStamp = "0b7e6a09-d682-431a-a675-67bf29d210d7",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 378, DateTimeKind.Utc).AddTicks(1697),
                            Email = "ahmet.ozturk@example.com",
                            EmailConfirmed = true,
                            EmployeeRelatedCompanyID = 3,
                            Gender = "Male",
                            HireDate = new DateOnly(2020, 5, 5),
                            IdentityNumber = "98765432109",
                            Job = "Data Analyst",
                            LockoutEnabled = false,
                            MarialStatus = "Married",
                            Name = "Ahmet",
                            NormalizedEmail = "AHMET.OZTURK@EXAMPLE.COM",
                            NormalizedUserName = "AHMET.OZTURK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPUSJHlq9G72r92ZhDFdjiKjqtLqD9w57I76zhAJhdb16RvNYJtSdx75UjwDzN5SFg==",
                            PhoneNumber = "+905399876543",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 7200m,
                            SecurityStamp = "b48520e4-47e9-40ff-9522-f78ae4e9f3b2",
                            Status = 1,
                            Surname = "Öztürk",
                            Title = "Analyst",
                            TwoFactorEnabled = false,
                            UserName = "ahmet.ozturk@example.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "Beylikdüzü",
                            BirthDate = new DateOnly(1995, 7, 10),
                            BirthState = "Adana",
                            BloodGroup = "BPositive",
                            ConcurrencyStamp = "9259cc6b-d9ac-4ce2-a3d7-2ca2731fc47c",
                            CreationDate = new DateTime(2024, 8, 25, 14, 7, 28, 444, DateTimeKind.Utc).AddTicks(8817),
                            Email = "zeynep.arslan@example.com",
                            EmailConfirmed = true,
                            EmployeeRelatedCompanyID = 3,
                            Gender = "Female",
                            HireDate = new DateOnly(2022, 3, 1),
                            IdentityNumber = "67890123456",
                            Job = "Marketing Specialist",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Zeynep",
                            NormalizedEmail = "ZEYNEP.ARSLAN@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEP.ARSLAN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPoZ+EVR3cMuc7i74DYUUzDVj0EikeYoRXuXTem+n9I+Fch3Icnb1XpvWXad2DX5yg==",
                            PhoneNumber = "+905366543210",
                            PhoneNumberConfirmed = false,
                            PicturePath = "default-avatar.jpg",
                            Salary = 6800.3m,
                            SecurityStamp = "a488ce02-54c0-4b1e-ace6-870c0cca53d8",
                            Status = 1,
                            Surname = "Arslan",
                            Title = "Specialist",
                            TwoFactorEnabled = false,
                            UserName = "zeynep.arslan@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("AdvanceRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "CEO")
                        .WithOne("CEORelatedCompany")
                        .HasForeignKey("HRMaster_API_Project.Entities.Concrete.Company", "CEOId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CEO");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "EmployeeRelatedCompany")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRelatedCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("EmployeeRelatedCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Navigation("AdvanceRequests");

                    b.Navigation("CEORelatedCompany");

                    b.Navigation("ExpenseRequests");

                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
