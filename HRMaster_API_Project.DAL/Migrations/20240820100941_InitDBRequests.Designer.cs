// <auto-generated />
using System;
using HRMaster_API_Project.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMaster_API_Project.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240820100941_InitDBRequests")]
    partial class InitDBRequests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AdvanceRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CEOId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyField")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyInformation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ContractStartingDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EstablishedDate")
                        .HasColumnType("date");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MersisNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxIdentificaitonNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxOfficeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CEOId")
                        .IsUnique()
                        .HasFilter("[CEOId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyAddress = "123 Innovation Drive",
                            CompanyEmail = "contact@techinnovations.com",
                            CompanyField = "Technology",
                            CompanyInformation = "Leading tech company specializing in innovative solutions.",
                            CompanyName = "Tech Innovations",
                            CompanyPhoneNumber = "555-1234",
                            CompanyTitle = "Tech Innovations Bilişim ve Teknoloji Şirketi",
                            CompanyType = "SoleProprietorship",
                            CompanyWebsite = "www.techinnovations.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 20, 13, 9, 41, 97, DateTimeKind.Local).AddTicks(5524),
                            EstablishedDate = new DateOnly(2001, 4, 23),
                            LogoPath = "/images/logos/tech_innovations.png",
                            MersisNumber = "1234567890",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI123456",
                            TaxOfficeName = "Downtown Tax Office"
                        },
                        new
                        {
                            ID = 2,
                            CompanyAddress = "456 Green Road",
                            CompanyEmail = "info@greenenergy.com",
                            CompanyField = "Energy",
                            CompanyInformation = "Providing renewable energy solutions worldwide.",
                            CompanyName = "Green Energy Solutions",
                            CompanyPhoneNumber = "555-5678",
                            CompanyTitle = "Green Energy Solutions AŞ.",
                            CompanyType = "JointStockCompany",
                            CompanyWebsite = "www.greenenergy.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 20, 13, 9, 41, 97, DateTimeKind.Local).AddTicks(5585),
                            EstablishedDate = new DateOnly(2010, 7, 15),
                            LogoPath = "/images/logos/greenenergy.jpeg",
                            MersisNumber = "0987654321",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI654321",
                            TaxOfficeName = "Uptown Tax Office"
                        },
                        new
                        {
                            ID = 3,
                            CompanyAddress = "789 Wellness Ave",
                            CompanyEmail = "support@healthwellness.com",
                            CompanyField = "Healthcare",
                            CompanyInformation = "Committed to providing top health and wellness services.",
                            CompanyName = "Health & Wellness",
                            CompanyPhoneNumber = "555-7890",
                            CompanyTitle = "Health & Wellness Sağlık ve Güzellik Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.healthwellness.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 20, 13, 9, 41, 97, DateTimeKind.Local).AddTicks(5591),
                            EstablishedDate = new DateOnly(2015, 3, 30),
                            LogoPath = "/images/logos/healthandwellness.jpeg",
                            MersisNumber = "1122334455",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI112233",
                            TaxOfficeName = "City Tax Office"
                        },
                        new
                        {
                            ID = 4,
                            CompanyAddress = "101 Education Blvd",
                            CompanyEmail = "admissions@edufuture.com",
                            CompanyField = "Education",
                            CompanyInformation = "Innovative education for the future.",
                            CompanyName = "EduFuture Academy",
                            CompanyPhoneNumber = "555-1011",
                            CompanyTitle = "EduFuture Eğitim Merkezi LTD.ŞTİ.",
                            CompanyType = "LimitedCompany",
                            CompanyWebsite = "www.edufuture.com",
                            ContractEndDate = new DateOnly(1, 1, 1),
                            ContractStartingDate = new DateOnly(2020, 3, 30),
                            CreationDate = new DateTime(2024, 8, 20, 13, 9, 41, 97, DateTimeKind.Local).AddTicks(5597),
                            EstablishedDate = new DateOnly(2020, 1, 10),
                            LogoPath = "/images/logos/edufuture.jpeg",
                            MersisNumber = "5566778899",
                            Status = 0,
                            TaxIdentificaitonNumber = "TI556677",
                            TaxOfficeName = "Suburb Tax Office"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("ExpenseRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<double>("LeaveDays")
                        .HasColumnType("float");

                    b.Property<DateOnly>("LeaveEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LeaveStartingDate")
                        .HasColumnType("date");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2c44f0b0-6bd2-4afa-8399-49060aedadb2",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1bc18d95-81d0-423e-bc38-666c64b74f08",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "c0baafa7-9884-4f51-8117-d1ee4557adc7",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CEORelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeRelatedCompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Job")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MarialStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmployeeRelatedCompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Üsküdar",
                            BloodGroup = "BPositive",
                            ConcurrencyStamp = "b50216ff-5c96-4ba9-9a98-d5aaa9ba1524",
                            CreationDate = new DateTime(2024, 8, 20, 10, 9, 41, 104, DateTimeKind.Utc).AddTicks(363),
                            Email = "onurakpinarr95@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Onur",
                            NormalizedEmail = "ONURAKPINARR95@GMAIL.COM",
                            NormalizedUserName = "ONURAKPINARR95@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDp2xPA9Wx7RjfagfKkKIwDcuwsY7smr8weuT2UYIfUTPw3HUm7FvDeJ2JIhi6mGIQ==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bd5b7f8-21ae-4b1e-8e2b-a30e4d88257c",
                            Status = 1,
                            Surname = "Akpınar",
                            TwoFactorEnabled = false,
                            UserName = "onurakpinarr95@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Küçükyalı",
                            BloodGroup = "APositive",
                            ConcurrencyStamp = "5935b235-ac5c-4820-8856-42f41d138d36",
                            CreationDate = new DateTime(2024, 8, 20, 10, 9, 41, 165, DateTimeKind.Utc).AddTicks(2139),
                            Email = "sinemgngr@outlook.com",
                            EmailConfirmed = true,
                            Gender = "Female",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Sinem",
                            NormalizedEmail = "SINEMGNGR@OUTLOOK.COM",
                            NormalizedUserName = "SINEMGNGR@OUTLOOK.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE25xEOnDREW/Fl9YlRaKp7bNgtyse0hmgalgukLqOcDrbQFnLLFOVLRZbGupGb89g==",
                            PhoneNumber = "+90544444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f02f7351-1830-4c92-9392-ca4dbf1c911f",
                            Status = 1,
                            Surname = "Güngör",
                            TwoFactorEnabled = false,
                            UserName = "sinemgngr@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Edirne",
                            BloodGroup = "OPositive",
                            ConcurrencyStamp = "4f956a17-a701-411b-8a9a-b398f868c940",
                            CreationDate = new DateTime(2024, 8, 20, 10, 9, 41, 223, DateTimeKind.Utc).AddTicks(1730),
                            Email = "recepoztuna@hotmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Recep",
                            NormalizedEmail = "RECEPOZTUNA@HOTMAIL.COM",
                            NormalizedUserName = "RECEPOZTUNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELLPbc1kSp8/k9uCg5fNvagbdLkJu6VpPr4T6175pq0kRcNLtv/TJWyIIuFT0Pn9pA==",
                            PhoneNumber = "+905333333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c5f16f1-b2a6-47da-90d0-9014861fd441",
                            Status = 1,
                            Surname = "Öztuna",
                            TwoFactorEnabled = false,
                            UserName = "recepoztuna@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Zeytinburnu",
                            BloodGroup = "ABPositive",
                            ConcurrencyStamp = "25de9f47-5b7a-4942-98b5-e1c1c0ae31ed",
                            CreationDate = new DateTime(2024, 8, 20, 10, 9, 41, 280, DateTimeKind.Utc).AddTicks(7119),
                            Email = "ozercemre1@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Male",
                            LockoutEnabled = false,
                            MarialStatus = "Single",
                            Name = "Cemre",
                            NormalizedEmail = "OZERCEMRE1@GMAIL.COM",
                            NormalizedUserName = "OZERCEMRE1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEB/vPKW+2dkRrN7QwPaNJvd/06qRBYNPsWB39Rc3d2werJX2JVwXSKjLGZKgtc3pA==",
                            PhoneNumber = "+905311111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "120c358a-8868-4436-99de-b3ce828854d4",
                            Status = 1,
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "ozercemre1@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.AdvanceRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("AdvanceRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "CEO")
                        .WithOne("CEORelatedCompany")
                        .HasForeignKey("HRMaster_API_Project.Entities.Concrete.Company", "CEOId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CEO");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.ExpenseRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.LeaveRequest", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Company", "EmployeeRelatedCompany")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRelatedCompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("EmployeeRelatedCompany");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HRMaster_API_Project.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMaster_API_Project.Entities.Concrete.User", b =>
                {
                    b.Navigation("AdvanceRequests");

                    b.Navigation("CEORelatedCompany");

                    b.Navigation("ExpenseRequests");

                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
